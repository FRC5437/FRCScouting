/*
-----------------------------------------------------
StatsStructGen.py 1.1

This file was autogenerated with run cmd:
  "gen_scripts/StatsStructGen.py --packagename=org.frc836.database --classname=MatchStatsStruct --tablename=fact_match_data_2018 --infile=FRC_Scouting_Server/scouting.sql --outfile=app/src/main/java/org/frc836/database/MatchStatsStruct.java"

python version info:
  3.4.2 (default, Oct  8 2014, 10:45:20) 
[GCC 4.9.1]

Please take heed of modifying unnecessarily
-----------------------------------------------------
*/

package org.frc836.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import org.frc836.database.FRCScoutingContract.FACT_MATCH_DATA_2018_Entry;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Date;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

public class MatchStatsStruct {


	public String event_id;
	public int team_id;
	public int match_id;
	public boolean practice_match;
	public String position_id;
	public boolean auto_run;
	public int auto_switch_count;
	public int auto_switch_wrong_side_count;
	public int auto_scale_count;
	public int auto_scale_wrong_side_count;
	public int auto_exchange_count;
	public int switch_count;
	public int switch_wrong_side_count;
	public int scale_count;
	public int scale_wrong_side_count;
	public int opposite_switch_count;
	public int opposite_switch_wrong_side_count;
	public int exchange_count;
	public boolean parked;
	public boolean climbed;
	public boolean climb_attempt;
	public boolean supported_others;
	public boolean foul;
	public boolean yellow_card;
	public boolean red_card;
	public boolean tip_over;
	public String notes;
	

	public static final String TABLE_NAME = FACT_MATCH_DATA_2018_Entry.TABLE_NAME;
	public static final String COLUMN_NAME_ID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_ID;
	public static final String COLUMN_NAME_EVENT_ID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_EVENT_ID;
	public static final String COLUMN_NAME_TEAM_ID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_TEAM_ID;
	public static final String COLUMN_NAME_MATCH_ID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_MATCH_ID;
	public static final String COLUMN_NAME_PRACTICE_MATCH = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_PRACTICE_MATCH;
	public static final String COLUMN_NAME_POSITION_ID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_POSITION_ID;
	public static final String COLUMN_NAME_AUTO_RUN = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_RUN;
	public static final String COLUMN_NAME_AUTO_SWITCH_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_SWITCH_COUNT;
	public static final String COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT;
	public static final String COLUMN_NAME_AUTO_SCALE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_SCALE_COUNT;
	public static final String COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT;
	public static final String COLUMN_NAME_AUTO_EXCHANGE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_AUTO_EXCHANGE_COUNT;
	public static final String COLUMN_NAME_SWITCH_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_SWITCH_COUNT;
	public static final String COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT;
	public static final String COLUMN_NAME_SCALE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_SCALE_COUNT;
	public static final String COLUMN_NAME_SCALE_WRONG_SIDE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_SCALE_WRONG_SIDE_COUNT;
	public static final String COLUMN_NAME_OPPOSITE_SWITCH_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_OPPOSITE_SWITCH_COUNT;
	public static final String COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT;
	public static final String COLUMN_NAME_EXCHANGE_COUNT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_EXCHANGE_COUNT;
	public static final String COLUMN_NAME_PARKED = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_PARKED;
	public static final String COLUMN_NAME_CLIMBED = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_CLIMBED;
	public static final String COLUMN_NAME_CLIMB_ATTEMPT = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_CLIMB_ATTEMPT;
	public static final String COLUMN_NAME_SUPPORTED_OTHERS = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_SUPPORTED_OTHERS;
	public static final String COLUMN_NAME_FOUL = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_FOUL;
	public static final String COLUMN_NAME_YELLOW_CARD = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_YELLOW_CARD;
	public static final String COLUMN_NAME_RED_CARD = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_RED_CARD;
	public static final String COLUMN_NAME_TIP_OVER = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_TIP_OVER;
	public static final String COLUMN_NAME_NOTES = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_NOTES;
	public static final String COLUMN_NAME_INVALID = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_INVALID;
	public static final String COLUMN_NAME_TIMESTAMP = FACT_MATCH_DATA_2018_Entry.COLUMN_NAME_TIMESTAMP;
	

	public MatchStatsStruct() {
		init();
	}
	
	public void init() {
		event_id = "";
		team_id = 0;
		match_id = 0;
		practice_match = false;
		position_id = "Red 1";
		auto_run = false;
		auto_switch_count = 0;
		auto_switch_wrong_side_count = 0;
		auto_scale_count = 0;
		auto_scale_wrong_side_count = 0;
		auto_exchange_count = 0;
		switch_count = 0;
		switch_wrong_side_count = 0;
		scale_count = 0;
		scale_wrong_side_count = 0;
		opposite_switch_count = 0;
		opposite_switch_wrong_side_count = 0;
		exchange_count = 0;
		parked = false;
		climbed = false;
		climb_attempt = false;
		supported_others = false;
		foul = false;
		yellow_card = false;
		red_card = false;
		tip_over = false;
		notes = "";
	}
	
	public MatchStatsStruct(int team, String event, int match) {
		init();
		this.team_id = team;
		this.event_id = event;
		this.match_id = match;
	}
	
	public MatchStatsStruct(int team, String event, int match, boolean practice) {
		init();
		this.team_id = team;
		this.event_id = event;
		this.match_id = match;
		this.practice_match = practice;
	}

	public ContentValues getValues(DB db, SQLiteDatabase database) {
		ContentValues vals = new ContentValues();
		long ev = db.getEventIDFromName(event_id, database);
		vals.put(COLUMN_NAME_ID, ev * 10000000 + match_id * 10000 + team_id);
		vals.put(COLUMN_NAME_EVENT_ID, ev);
		vals.put(COLUMN_NAME_TEAM_ID, team_id);
		vals.put(COLUMN_NAME_MATCH_ID, match_id);
		vals.put(COLUMN_NAME_PRACTICE_MATCH, practice_match ? 1 : 0);
		vals.put(COLUMN_NAME_POSITION_ID, db.getPosIDFromName(position_id, database));
		vals.put(COLUMN_NAME_AUTO_RUN, auto_run ? 1 : 0);
		vals.put(COLUMN_NAME_AUTO_SWITCH_COUNT, auto_switch_count);
		vals.put(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT, auto_switch_wrong_side_count);
		vals.put(COLUMN_NAME_AUTO_SCALE_COUNT, auto_scale_count);
		vals.put(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT, auto_scale_wrong_side_count);
		vals.put(COLUMN_NAME_AUTO_EXCHANGE_COUNT, auto_exchange_count);
		vals.put(COLUMN_NAME_SWITCH_COUNT, switch_count);
		vals.put(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT, switch_wrong_side_count);
		vals.put(COLUMN_NAME_SCALE_COUNT, scale_count);
		vals.put(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT, scale_wrong_side_count);
		vals.put(COLUMN_NAME_OPPOSITE_SWITCH_COUNT, opposite_switch_count);
		vals.put(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT, opposite_switch_wrong_side_count);
		vals.put(COLUMN_NAME_EXCHANGE_COUNT, exchange_count);
		vals.put(COLUMN_NAME_PARKED, parked ? 1 : 0);
		vals.put(COLUMN_NAME_CLIMBED, climbed ? 1 : 0);
		vals.put(COLUMN_NAME_CLIMB_ATTEMPT, climb_attempt ? 1 : 0);
		vals.put(COLUMN_NAME_SUPPORTED_OTHERS, supported_others ? 1 : 0);
		vals.put(COLUMN_NAME_FOUL, foul ? 1 : 0);
		vals.put(COLUMN_NAME_YELLOW_CARD, yellow_card ? 1 : 0);
		vals.put(COLUMN_NAME_RED_CARD, red_card ? 1 : 0);
		vals.put(COLUMN_NAME_TIP_OVER, tip_over ? 1 : 0);
		vals.put(COLUMN_NAME_NOTES, notes);
		vals.put(COLUMN_NAME_INVALID, 1);
	
		return vals;
	}

	public void fromCursor(Cursor c, DB db, SQLiteDatabase database) {
		fromCursor(c, db, database, 0);
	}
	
	public void fromCursor(Cursor c, DB db, SQLiteDatabase database, int pos) {
		c.moveToPosition(pos);
		event_id = DB.getEventNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_EVENT_ID)), database);
		team_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TEAM_ID));
		match_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_MATCH_ID));
		practice_match = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PRACTICE_MATCH)) != 0;
		position_id = DB.getPosNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_POSITION_ID)), database);
		auto_run = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_RUN)) != 0;
		auto_switch_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SWITCH_COUNT));
		auto_switch_wrong_side_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT));
		auto_scale_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SCALE_COUNT));
		auto_scale_wrong_side_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT));
		auto_exchange_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_EXCHANGE_COUNT));
		switch_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SWITCH_COUNT));
		switch_wrong_side_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT));
		scale_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SCALE_COUNT));
		scale_wrong_side_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT));
		opposite_switch_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_OPPOSITE_SWITCH_COUNT));
		opposite_switch_wrong_side_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT));
		exchange_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_EXCHANGE_COUNT));
		parked = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PARKED)) != 0;
		climbed = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CLIMBED)) != 0;
		climb_attempt = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CLIMB_ATTEMPT)) != 0;
		supported_others = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SUPPORTED_OTHERS)) != 0;
		foul = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_FOUL)) != 0;
		yellow_card = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_YELLOW_CARD)) != 0;
		red_card = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_RED_CARD)) != 0;
		tip_over = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TIP_OVER)) != 0;
		notes = c.getString(c.getColumnIndexOrThrow(COLUMN_NAME_NOTES));
	}

	public String[] getProjection() {
		List<String> temp = new ArrayList<String>(27);
		temp.add(COLUMN_NAME_EVENT_ID);
		temp.add(COLUMN_NAME_TEAM_ID);
		temp.add(COLUMN_NAME_MATCH_ID);
		temp.add(COLUMN_NAME_PRACTICE_MATCH);
		temp.add(COLUMN_NAME_POSITION_ID);
		temp.add(COLUMN_NAME_AUTO_RUN);
		temp.add(COLUMN_NAME_AUTO_SWITCH_COUNT);
		temp.add(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT);
		temp.add(COLUMN_NAME_AUTO_SCALE_COUNT);
		temp.add(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT);
		temp.add(COLUMN_NAME_AUTO_EXCHANGE_COUNT);
		temp.add(COLUMN_NAME_SWITCH_COUNT);
		temp.add(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT);
		temp.add(COLUMN_NAME_SCALE_COUNT);
		temp.add(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT);
		temp.add(COLUMN_NAME_OPPOSITE_SWITCH_COUNT);
		temp.add(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT);
		temp.add(COLUMN_NAME_EXCHANGE_COUNT);
		temp.add(COLUMN_NAME_PARKED);
		temp.add(COLUMN_NAME_CLIMBED);
		temp.add(COLUMN_NAME_CLIMB_ATTEMPT);
		temp.add(COLUMN_NAME_SUPPORTED_OTHERS);
		temp.add(COLUMN_NAME_FOUL);
		temp.add(COLUMN_NAME_YELLOW_CARD);
		temp.add(COLUMN_NAME_RED_CARD);
		temp.add(COLUMN_NAME_TIP_OVER);
		temp.add(COLUMN_NAME_NOTES);
		String[] projection = new String[temp.size()];
		return temp.toArray(projection);
	}

	public boolean isTextField(String column_name) {
		if (COLUMN_NAME_NOTES.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public boolean needsConvertedToText(String column_name) {
		if (COLUMN_NAME_EVENT_ID.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_POSITION_ID.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public ContentValues jsonToCV(JSONObject json) throws JSONException {
		ContentValues vals = new ContentValues();
		vals.put(COLUMN_NAME_ID, json.has(COLUMN_NAME_ID) ? json.getInt(COLUMN_NAME_ID) : 0);
		vals.put(COLUMN_NAME_EVENT_ID, json.has(COLUMN_NAME_EVENT_ID) ? json.getInt(COLUMN_NAME_EVENT_ID) : 0);
		vals.put(COLUMN_NAME_TEAM_ID, json.has(COLUMN_NAME_TEAM_ID) ? json.getInt(COLUMN_NAME_TEAM_ID) : 0);
		vals.put(COLUMN_NAME_MATCH_ID, json.has(COLUMN_NAME_MATCH_ID) ? json.getInt(COLUMN_NAME_MATCH_ID) : 0);
		vals.put(COLUMN_NAME_PRACTICE_MATCH, json.has(COLUMN_NAME_PRACTICE_MATCH) ? json.getInt(COLUMN_NAME_PRACTICE_MATCH) : 0);
		vals.put(COLUMN_NAME_POSITION_ID, json.has(COLUMN_NAME_POSITION_ID) ? json.getInt(COLUMN_NAME_POSITION_ID) : 0);
		vals.put(COLUMN_NAME_AUTO_RUN, json.has(COLUMN_NAME_AUTO_RUN) ? json.getInt(COLUMN_NAME_AUTO_RUN) : 0);
		vals.put(COLUMN_NAME_AUTO_SWITCH_COUNT, json.has(COLUMN_NAME_AUTO_SWITCH_COUNT) ? json.getInt(COLUMN_NAME_AUTO_SWITCH_COUNT) : 0);
		vals.put(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT, json.has(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT) ? json.getInt(COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT) : 0);
		vals.put(COLUMN_NAME_AUTO_SCALE_COUNT, json.has(COLUMN_NAME_AUTO_SCALE_COUNT) ? json.getInt(COLUMN_NAME_AUTO_SCALE_COUNT) : 0);
		vals.put(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT, json.has(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT) ? json.getInt(COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT) : 0);
		vals.put(COLUMN_NAME_AUTO_EXCHANGE_COUNT, json.has(COLUMN_NAME_AUTO_EXCHANGE_COUNT) ? json.getInt(COLUMN_NAME_AUTO_EXCHANGE_COUNT) : 0);
		vals.put(COLUMN_NAME_SWITCH_COUNT, json.has(COLUMN_NAME_SWITCH_COUNT) ? json.getInt(COLUMN_NAME_SWITCH_COUNT) : 0);
		vals.put(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT, json.has(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT) ? json.getInt(COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT) : 0);
		vals.put(COLUMN_NAME_SCALE_COUNT, json.has(COLUMN_NAME_SCALE_COUNT) ? json.getInt(COLUMN_NAME_SCALE_COUNT) : 0);
		vals.put(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT, json.has(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT) ? json.getInt(COLUMN_NAME_SCALE_WRONG_SIDE_COUNT) : 0);
		vals.put(COLUMN_NAME_OPPOSITE_SWITCH_COUNT, json.has(COLUMN_NAME_OPPOSITE_SWITCH_COUNT) ? json.getInt(COLUMN_NAME_OPPOSITE_SWITCH_COUNT) : 0);
		vals.put(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT, json.has(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT) ? json.getInt(COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT) : 0);
		vals.put(COLUMN_NAME_EXCHANGE_COUNT, json.has(COLUMN_NAME_EXCHANGE_COUNT) ? json.getInt(COLUMN_NAME_EXCHANGE_COUNT) : 0);
		vals.put(COLUMN_NAME_PARKED, json.has(COLUMN_NAME_PARKED) ? json.getInt(COLUMN_NAME_PARKED) : 0);
		vals.put(COLUMN_NAME_CLIMBED, json.has(COLUMN_NAME_CLIMBED) ? json.getInt(COLUMN_NAME_CLIMBED) : 0);
		vals.put(COLUMN_NAME_CLIMB_ATTEMPT, json.has(COLUMN_NAME_CLIMB_ATTEMPT) ? json.getInt(COLUMN_NAME_CLIMB_ATTEMPT) : 0);
		vals.put(COLUMN_NAME_SUPPORTED_OTHERS, json.has(COLUMN_NAME_SUPPORTED_OTHERS) ? json.getInt(COLUMN_NAME_SUPPORTED_OTHERS) : 0);
		vals.put(COLUMN_NAME_FOUL, json.has(COLUMN_NAME_FOUL) ? json.getInt(COLUMN_NAME_FOUL) : 0);
		vals.put(COLUMN_NAME_YELLOW_CARD, json.has(COLUMN_NAME_YELLOW_CARD) ? json.getInt(COLUMN_NAME_YELLOW_CARD) : 0);
		vals.put(COLUMN_NAME_RED_CARD, json.has(COLUMN_NAME_RED_CARD) ? json.getInt(COLUMN_NAME_RED_CARD) : 0);
		vals.put(COLUMN_NAME_TIP_OVER, json.has(COLUMN_NAME_TIP_OVER) ? json.getInt(COLUMN_NAME_TIP_OVER) : 0);
		vals.put(COLUMN_NAME_NOTES, json.has(COLUMN_NAME_NOTES) ? json.getString(COLUMN_NAME_NOTES) : "");
		vals.put(COLUMN_NAME_INVALID, 0);
		vals.put(COLUMN_NAME_TIMESTAMP, DB.dateParser.format(new Date(json.getLong(COLUMN_NAME_TIMESTAMP) * 1000)));
		return vals;
	}

	public LinkedHashMap<String,String> getDisplayData() {
		LinkedHashMap<String,String> vals = new LinkedHashMap<String,String>();
		vals.put( COLUMN_NAME_EVENT_ID, event_id);
		vals.put( COLUMN_NAME_TEAM_ID, String.valueOf(team_id));
		vals.put( COLUMN_NAME_MATCH_ID, String.valueOf(match_id));
		vals.put( COLUMN_NAME_PRACTICE_MATCH, String.valueOf(practice_match ? 1 : 0));
		vals.put( COLUMN_NAME_POSITION_ID, position_id);
		vals.put( COLUMN_NAME_AUTO_RUN, String.valueOf(auto_run ? 1 : 0));
		vals.put( COLUMN_NAME_AUTO_SWITCH_COUNT, String.valueOf(auto_switch_count));
		vals.put( COLUMN_NAME_AUTO_SWITCH_WRONG_SIDE_COUNT, String.valueOf(auto_switch_wrong_side_count));
		vals.put( COLUMN_NAME_AUTO_SCALE_COUNT, String.valueOf(auto_scale_count));
		vals.put( COLUMN_NAME_AUTO_SCALE_WRONG_SIDE_COUNT, String.valueOf(auto_scale_wrong_side_count));
		vals.put( COLUMN_NAME_AUTO_EXCHANGE_COUNT, String.valueOf(auto_exchange_count));
		vals.put( COLUMN_NAME_SWITCH_COUNT, String.valueOf(switch_count));
		vals.put( COLUMN_NAME_SWITCH_WRONG_SIDE_COUNT, String.valueOf(switch_wrong_side_count));
		vals.put( COLUMN_NAME_SCALE_COUNT, String.valueOf(scale_count));
		vals.put( COLUMN_NAME_SCALE_WRONG_SIDE_COUNT, String.valueOf(scale_wrong_side_count));
		vals.put( COLUMN_NAME_OPPOSITE_SWITCH_COUNT, String.valueOf(opposite_switch_count));
		vals.put( COLUMN_NAME_OPPOSITE_SWITCH_WRONG_SIDE_COUNT, String.valueOf(opposite_switch_wrong_side_count));
		vals.put( COLUMN_NAME_EXCHANGE_COUNT, String.valueOf(exchange_count));
		vals.put( COLUMN_NAME_PARKED, String.valueOf(parked ? 1 : 0));
		vals.put( COLUMN_NAME_CLIMBED, String.valueOf(climbed ? 1 : 0));
		vals.put( COLUMN_NAME_CLIMB_ATTEMPT, String.valueOf(climb_attempt ? 1 : 0));
		vals.put( COLUMN_NAME_SUPPORTED_OTHERS, String.valueOf(supported_others ? 1 : 0));
		vals.put( COLUMN_NAME_FOUL, String.valueOf(foul ? 1 : 0));
		vals.put( COLUMN_NAME_YELLOW_CARD, String.valueOf(yellow_card ? 1 : 0));
		vals.put( COLUMN_NAME_RED_CARD, String.valueOf(red_card ? 1 : 0));
		vals.put( COLUMN_NAME_TIP_OVER, String.valueOf(tip_over ? 1 : 0));
		vals.put( COLUMN_NAME_NOTES, notes);
		return vals;
	}

}